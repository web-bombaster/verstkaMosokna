
document.addEventListener(
	"DOMContentLoaded", () => {
		function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});// Меню для ПК
// Раздаем первоначальные классы активности пунктам меню при загрузке страницы
// Предварительно проверяем, есть ли уже эти классы в разметке. Если есть, то не добавляем.
function addClassActive() {
    if (document.querySelector('.main-menu__link')) {

        let flag;
        let flagLvl2;

        document.querySelectorAll('.main-menu__link').forEach(element => {
            if (!element.classList.contains('active')) {
                flag = true;
            };
        });

        if (flag) {
            document.querySelector('.main-menu__link').classList.add('active');
        };

        const lvl2 = document.querySelector('.main-menu__link.active').nextElementSibling.querySelectorAll('.main-menu__submenu-link');

        lvl2.forEach(element => {
            if (!element.classList.contains('active')) {
                flag = true;
            };
        });

        if (flag) {
            document.querySelector('.main-menu__link.active').nextElementSibling.querySelector('.main-menu__submenu-link').classList.add('active');
        };
    };
};
addClassActive();


// Инициализация меню для ПК второго уровня
function pcMenuToggle2lvl() {
    if (document.querySelector('.main-menu__link')) {
        const mainMenuLink = document.querySelectorAll('.main-menu__link'); // все пункты первого уровня
        const currentInitBox = document.querySelector('.header-bottom__box'); // куда будем записывать меню второго уровня
        let currentInitEl, newInitEl;

        currentInitEl = document.querySelector('.main-menu__link.active').nextElementSibling; // находим подменю второго уровня активного элемента первого уровня для копирования - не cons, т.к. будет изменяться
        newInitEl = currentInitEl.cloneNode(true); // создаем новый элемент, который будем вставлять в панель второго уровня - не cons, т.к. будет изменяться

        currentInitBox.innerHTML = ''; // предварительно все очищаем
        currentInitBox.prepend(newInitEl); // Инициализация меню второго уровня

        mainMenuLink.forEach(element => {
            // Поменять класс активности у раздела по наведению
            element.addEventListener('mouseenter', function (e) {
                mainMenuLink.forEach(element => {
                    element.classList.remove('active');
                });
                element.classList.toggle('active');

                // Чистим класс активности у пунктов второго уровня
                document.querySelectorAll('.main-menu__submenu-link').forEach(element => {
                    element.classList.remove('active');
                });

                e.target.closest('.main-menu__link').nextElementSibling.querySelector('.main-menu__submenu-link').classList.add('active'); // даем класс активности нужному пункту второго уровня

                currentInitEl = document.querySelector('.main-menu__link.active').nextElementSibling; // находим подменю второго уровня активного элемента первого уровня для копирования - не cons, т.к. будет изменяться
                newInitEl = currentInitEl.cloneNode(true); // создаем новый элемент, который будем вставлять в панель второго уровня - не cons, т.к. будет изменяться

                currentInitBox.innerHTML = ''; // предварительно все очищаем
                currentInitBox.prepend(newInitEl); // Инициализация меню второго уровня

                pcMenuToggle3lvl(); // вызываем заполнение меню третьего уровня и при наведении на другой пункт меню первого уровня

                headerFixed(); //
            });
        });
    };
};

// Инициализация меню для ПК третьего уровня
function pcMenuToggle3lvl() {
    if (document.querySelector('.subsections')) {

        const mainMenuLink = document.querySelectorAll('.main-menu__submenu-link'); // все пункты второго уровня
        const currentInitBox = document.querySelector('.subsections'); // куда будем записывать меню третьего уровня
        let currentInitEl, newInitEl;

        currentInitEl = document.querySelector('.main-menu__submenu-link.active').nextElementSibling; // находим подменю третьего уровня активного элемента второго уровня для копирования - не cons, т.к. будет изменяться
        newInitEl = currentInitEl.cloneNode(true); // создаем новый элемент, который будем вставлять в панель третьего уровня - не cons, т.к. будет изменяться

        currentInitBox.innerHTML = '';
        currentInitBox.append(newInitEl);

        mainMenuLink.forEach(element => {
            // Поменять класс активности у раздела по наведению
            element.addEventListener('mouseenter', function (e) {
                mainMenuLink.forEach(element => {
                    element.classList.remove('active');
                });
                element.classList.toggle('active');

                currentInitEl = document.querySelector('.main-menu__submenu-link.active').nextElementSibling; // находим подменю третьего уровня активного элемента второго уровня для копирования - не cons, т.к. будет изменяться
                newInitEl = currentInitEl.cloneNode(true); // создаем новый элемент, который будем вставлять в панель третьего уровня - не cons, т.к. будет изменяться
        
                currentInitBox.innerHTML = '';
                currentInitBox.append(newInitEl);
            });
        });
    };
};

pcMenuToggle2lvl();
// window.addEventListener("resize", pcMenuToggle2lvl);

pcMenuToggle3lvl();


if (document.querySelector('.jsMobileMenuBtnToggle')) {

    const menuBtn = document.querySelector('.jsMobileMenuBtnToggle');

    // Показать / скрыть мобильное меню
    function menuToggle() {
        const body = document.querySelector('body');
        const menu = document.querySelector('.mobile-menu');

        if (!menuBtn.classList.contains('toggle')) {
            menu.classList.add('toggle');
            body.classList.add('toggle');
        } else {
            menu.classList.remove('toggle');
            body.classList.remove('toggle');
        }

        window.addEventListener('resize', function () {
            menuBtn.classList.remove('toggle');
            menu.classList.remove('toggle');
            body.classList.remove('toggle');
        }, true);

        // heightMenuOverlay(); // меняем высоту оверлея меню при ресайзе
    }

	// Определяем высоту мобильного меню и размещаем под шапкой
	function positionMobileMenu() {
		const heightViewport = document.documentElement.clientHeight;
		const heightHeader = document.querySelector('.header').offsetHeight;
		const heightMenuOverlay = heightViewport - heightHeader;
		let posTop = window.pageYOffset;

		const menuActive = document.querySelector('.mobile-menu.toggle');

		if (menuActive) {
			menuActive.style.height = heightMenuOverlay + 'px';
			menuActive.style.top = posTop + heightHeader + 'px';
		};
	};

    // Закрываем мобильное меню по клику вне его
    function closeMobileMenu() {
        const btnMenu = document.querySelector('.jsMobileMenuBtnToggle');
        const body = document.querySelector('body');
        const menu = document.querySelector('.mobile-menu');

        document.addEventListener("click", function (e) {
            const target = e.target;
            const its_menu = target == menu || menu.contains(target);
            const its_btnMenu = target == btnMenu;

            if (!its_menu && !its_btnMenu) {
                menuBtn.classList.remove('toggle');
                menu.classList.remove('toggle');
                body.classList.remove('toggle');
            }
        });
    };

    menuBtn.addEventListener("click", menuToggle);
    menuBtn.addEventListener("click", positionMobileMenu);
    // window.addEventListener("resize", positionMobileMenu);
    closeMobileMenu();
};



// Для открывающихся пунктов меню по щелчку будем менять класс toggle
function mobileMenuToggleSubmenu() {
    if (document.querySelector('.mobile-menu .main-menu__link')) {
        const mobileMenuSubMenuOpenBtn = document.querySelectorAll('.mobile-menu .main-menu__link');

        mobileMenuSubMenuOpenBtn.forEach(element => {
            element.addEventListener('click', function(e) {
                e.preventDefault();
                e.target.closest('.main-menu__link').classList.toggle('toggle');
            });
        });
    };
};

// window.addEventListener("resize", mobileMenuToggleSubmenu);
mobileMenuToggleSubmenu();const headerFixed = () => {
    const heightHeader = document.querySelector('.header').offsetHeight; // высота хедера
    document.body.style.paddingTop = heightHeader + 'px';
};

const headerBtnPhone = () => {
    const btnPhone = document.querySelector('.header-btn-phone__icon').firstElementChild; // высота хедера

    if (document.documentElement.clientWidth > 768) {
        btnPhone.setAttribute('xlink:href', 'img/sprite.svg#telephone');
    } else {
        btnPhone.setAttribute('xlink:href', 'img/sprite.svg#telephone-line');
    }
};

headerFixed();
headerBtnPhone();
// запускаем headerFixed при ресайзе
window.addEventListener("resize", headerFixed);
// запускаем headerBtnPhone при ресайзе
window.addEventListener("resize", headerBtnPhone);


// Показать / скрыть разделы страницы
function togglePageSections() {
    if (document.querySelector('.subsections-btn')) {
        const btnToggle = document.querySelector('.subsections-btn'); // кнопка переключения
        const subsections = document.querySelector('.subsections'); // список разделов
        let flag = true; // проверка состояния включалась ли прокрутка. flag = false - прокрутка уже была включена

        btnToggle.style.display = 'none'; // изначально скрываем кнопку

        // Если Viewport <= 768 активируем переключатель разделов страницы
        function checkMobile() {
            const widthViewport = document.documentElement.clientWidth;
            if (widthViewport <= 880) {
                btnToggle.style.display = 'inline-flex';
                btnToggle.classList.add('toggle');
                headerFixed();

                document.querySelector('.jsMobileMenuBtnToggle').addEventListener('click', function() {
                    // btnToggle.classList.add('toggle');
                    // btnToggle.classList.remove('toggle');
                    // subsections.style.display = 'none';
                    // headerFixed();
                });

            } else {
                subsections.style.display = 'block';
            };
        };
        checkMobile();
        window.addEventListener("resize", checkMobile);

        btnToggle.addEventListener('click', function() {
            if (btnToggle.classList.contains('toggle')) {
                flag = false;
                btnToggle.querySelector('.subsections-btn__text').innerText = 'Скрыть подразделы';
                btnToggle.querySelector('.subsections-btn__icon').setAttribute("src", "img/icons/close.svg");
                subsections.style.display = 'block';
            } else {
                btnToggle.querySelector('.subsections-btn__text').innerText = 'Разделы страницы';
                btnToggle.querySelector('.subsections-btn__icon').setAttribute("src", "img/icons/list-ul.svg");
                subsections.style.display = 'none';
            };

            btnToggle.classList.toggle('toggle');
            subsections.classList.toggle('toggle');
            headerFixed();
        });

        window.addEventListener('scroll', function() {
            if (flag != false) {
                btnToggle.classList.add('toggle');
                subsections.classList.add('toggle');
                flag = false;
                btnToggle.style.display = 'inline-flex';
                subsections.style.display = 'none';
            };
        });

    };
};
togglePageSections();

const openSearchPanel = () => {
	let btnSearch = document.querySelector('.header-middle__btn--search');
	let searchPanel = document.querySelector('.search');
	let searchClose = document.querySelector('.search-close');
	
	btnSearch.addEventListener('click', (e) => {
		e.preventDefault();
		searchPanel.classList.toggle('active');
	});

	searchClose.addEventListener('click', (e) => {
		e.preventDefault();
		searchPanel.classList.toggle('active');
	});
};

openSearchPanel();
if (document.querySelector('.js-burger')) {

    const btnBurger = document.querySelectorAll('.js-burger');

    // Открыть / закрыть бургер по клику на него
    function btnBurgerToggle(e) {
        e.target.classList.toggle('toggle');
    }

    // При ресайзе возвращаем кнопки в исходное состояние
    // function btnBurgerToggleClassRemove() {
    //     btnBurger.forEach(element => {
    //         element.classList.remove('toggle');
    //     });
    // }

    btnBurger.forEach(element => {
        element.addEventListener("click", btnBurgerToggle);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}

// по клику на .js-catalog-open-btn открываем / закрываем меню с категориями каталога
if (document.querySelector('.js-catalog-open-btn')) {
    const catalogOpenBtn = document.querySelectorAll('.js-catalog-open-btn');

    // Открыть / закрыть подменю по клику на .js-catalog-open-btn
    function toggleOpen(e) {

        const toggleBtn = (this.closest('.js-catalog-open-btn'));
        const toggleBody = toggleBtn.nextElementSibling;

        toggleBody.classList.toggle('toggle');
    }

    catalogOpenBtn.forEach(element => {
        element.addEventListener("click", toggleOpen);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}



// Инициализация Inputmask
// https://github.com/RobinHerbots/Inputmask

function initInputMask() {
	let formPhone = document.querySelectorAll('.form__phone');
	formPhone.forEach(element => {
		Inputmask({ "mask": "+7 (999) 999-99-99" }).mask(element);
	});
}

initInputMask();

// Инициализация just-validate
// https://github.com/horprogs/Just-validate
// https://just-validate.dev/

function initJustValidatHelpForme() {
	const validation = new JustValidate('.help__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
}

if (document.querySelector('.help__form')) {
	initJustValidatHelpForme();
}

function initJustValidatRegistrationForm() {
	const validation = new JustValidate('.registration__form');

	validation
		// .addField('.form__name', [
		// 	{
		// 		rule: 'required',
		// 		errorMessage: 'Введите имя!',
		// 	},
		// 	{
		// 		rule: 'minLength',
		// 		value: 3,
		// 		errorMessage: 'Минимум 3 символа',
		// 	},
		// 	{
		// 		rule: 'maxLength',
		// 		value: 30,
		// 		errorMessage: 'Максимум 30 символов',
		// 	},
		// ])
		.addField('.form__name', [
			{
				rule: 'required',
				errorMessage: 'Введите имя!',
			},
		])
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
	// .onSuccess((event) => {

	// 	// sentForm();
	// 	// Когда валидация прошла, отправляем форму
	// 	let element = event.target;
	// 	let formData = new FormData(element);
	// 	let xhr = new XMLHttpRequest();
	// 	xhr.onreadystatechange = function () {
	// 		if (xhr.readyState === 4) {
	// 			if (xhr.status === 200) {
	// 				console.log('Отправлено');
	// 				// Закрываем модалку
	// 				element.closest('.modal').classList.remove('show');
	// 				// Показываем другую модалку с ссобщением об успещной отправке
	// 				document.getElementById('modal-05').classList.add('show');
	// 			}
	// 		}
	// 	}

	// 	xhr.open('POST', 'mail.php', true);
	// 	xhr.send(formData);

	// 	element.reset();

	// });
}

if (document.querySelector('.registration__form')) {
	initJustValidatRegistrationForm();
}

function initJustValidatGoodDeal() {
	const validation = new JustValidate('.good-deal__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
}

if (document.querySelector('.good-deal__form')) {
	initJustValidatGoodDeal();
}const accordeonItems = document.querySelectorAll('.accordeon__title'); // Все заголовки элементов аккордиона, по которым щелкаем для открытия / закрытия контента выбранного элемента
const accordeonItemsContent = document.querySelectorAll('.accordeon__content'); // Контент всех элементов аккордиона, который открывается, закрывается

// Перебираем заголовки аккордеона, по которым можем щелкнуть
accordeonItems.forEach((element, index) => {
	// Вешаем событие клика на каждый заголовок аккордеона
	element.addEventListener('click', function () {

		// Если у элемента, по которому щелкнули, нет класса активности,
		// if (!accordeonItems[index].classList.contains('accordeon__title--active')) {

		// 	// Пробегаемся по заголовкам элементов аккордеона
		// 	accordeonItems.forEach(element => {
		// 		// удаляем класс активности
		// 		element.classList.remove('accordeon__title--active');
		// 	});

		// 	// Перебираем контент для айтемов аккордиона и скрываем.
		// 	accordeonItemsContent.forEach(element => {
		// 		element.classList.add('accordeon__content--hidden');
		// 	});
		// };

		// Переключаем класс активности элемента, по которому щелкнули
		accordeonItems[index].classList.toggle('accordeon__title--active');

		// Делаем тоггл для контета элемента, по которому щелкнули
		accordeonItemsContent[index].classList.toggle('accordeon__content--hidden');

	});
});// Инициализация слайдера swiper
// https://swiperjs.com/

function initSwiper() {

	if (document.querySelector('.js-services-list')) {
		const servicesList = new Swiper('.js-services-list', {
			spaceBetween: 16,
			slidesPerView: 1.3,
			lazy: true,
			loop: true,
			breakpoints: {
				600: {
					slidesPerView: 2,
					spaceBetween: 16,
					loop: true,
				},
				768: {
					slidesPerView: 2.3,
					spaceBetween: 16,
					loop: true,
				},
				992: {
					slidesPerView: 3,
					spaceBetween: 24,
					loop: true,
				},
			},
			navigation: {
				nextEl: ".services-list__next",
				prevEl: ".services-list__prev",
			},
		});
	};

	// if (document.querySelector('.js-bubbles-list')) {
	// 	if (document.documentElement.clientWidth <= 767) {
	// 		const bubblesList = new Swiper('.js-bubbles-list', {
	// 			spaceBetween: 0,
	// 			slidesPerView: "auto",
	// 			// loop: true,
	// 			enabled: true,
	// 			freeMode: true,
	// 			breakpoints: {
	// 				768: {
	// 					enabled: false,
	// 				},
	// 			},
	// 			grid: {
	// 				rows: 2,
	// 			},
	// 			navigation: {
	// 				nextEl: ".bubbles-list__next",
	// 				prevEl: ".bubbles-list__prev",
	// 			},
	// 		});
	// 	};
	// };



	if (document.querySelector('.jsBrandsList')) {
		const brandsList = new Swiper('.jsBrandsList', {
			// slidesPerView: 5,
			loop: true,
			spaceBetween: 20,
			autoplay: {
				delay: 2500,
			},
			navigation: {
				nextEl: '.brands__button-next',
				prevEl: '.brands__button-prev',
			},

			breakpoints: {
				319: {
					slidesPerView: 2,
				},

				767: {
					slidesPerView: 3,
				},

				991: {
					slidesPerView: 4,
				},
				1199: {
					slidesPerView: 5,
				},
			},
		});
	};
};

// window.addEventListener("resize", initSwiper);
window.addEventListener("resize", function () {
	// setTimeout(initSwiper, 200);
	initSwiper();
	// swiper.init();
});

initSwiper();


// -include './myscripts/blazy-init.js'
	}
);
